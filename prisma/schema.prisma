datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}

enum Status {
  active
  inactive
} 

model Role {
  id            String          @id @default(cuid())
  name          String             
  status        Status          @default(active)        

  users         User[]
  accessRoles   AccessRole[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Menu {
  id            String          @id @default(cuid())
  name          String  
  url           String?
  icon          String?
  idMenu        String?

  accessRoles   AccessRole[]

  status        Status          @default(active)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AccessRole {
  id            String          @id @default(cuid())

  role          Role?           @relation(fields: [idRole], references: [id])
  idRole        String?

  menu          Menu?           @relation(fields: [idMenu], references: [id])
  idMenu        String?

  access        Boolean         @default(false) 
  add           Boolean         @default(false)     

  status        Status          @default(active)    
    
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id            String          @id @default(cuid())
  name          String
  email         String          @unique
  password      String
  emailVerified DateTime?
  phone         String  
  image         String?
  status        Status          @default(active)    

  organization    Organization?    @relation(fields: [idOrganization], references: [id])
  idOrganization  String?

  role            Role?            @relation(fields: [idRole], references: [id])
  idRole          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String             @unique
  token      String
  expires    DateTime
  
  @@id([identifier])
}

model Mode {
  id            String          @id @default(cuid())
  value         String
  name          String
  status        Status          @default(active)

  employees     Employee[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
} 

model Employee {
  id              String          @id @default(cuid())
  firstName       String
  lastName        String
  identifier      String                  
  email           String?           
  phone           String?  
  image           String?

  clockIn       String?  
  clockOut      String?
  
  status          Status          @default(active)    

  location        Location?       @relation(fields: [idLocation], references: [id])
  idLocation      String?

  mode            Mode?           @relation(fields: [idMode], references: [id])
  idMode          String?   

  attendances     Attendance[]
  justifications  Justification[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Organization {
  id            String          @id @default(cuid())
  name          String
  email         String          @unique
  address       String?  
  logo          String?
  lat           String?
  lng           String?
  status        Status          @default(active)         

  timezone      Timezone?        @relation(fields: [idTimezone], references: [id])
  idTimezone    String?

  timeformat      Timeformat?        @relation(fields: [idTimeformat], references: [id])
  idTimeformat    String?

  users                  User[]  
  locations              Location[]  
  organizationParams     OrganizationParams[] 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt  
}

model OrganizationParams {
  id            String          @id @default(cuid())

  identifier    String?
  clockIn       String?  
  clockOut      String?
  
  analyticTitle      String?
  analyticSrc        String?

  organization      Organization    @relation(fields: [idOrganization], references: [id])
  idOrganization    String

  payPeriodType       PayPeriodType?       @relation(fields: [idPayPeriodType], references: [id])
  idPayPeriodType     String?
  payPeriodStart      DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt  
}

model PayPeriodType {
  id            String          @id @default(cuid())
  value         String
  name          String
  status        Status          @default(active)

  organizationParams        OrganizationParams[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
} 

model Location {
  id                String          @id @default(cuid())
  name              String          
  address           String? 
  status            Status          @default(active)
    
  organization      Organization    @relation(fields: [idOrganization], references: [id])
  idOrganization    String 

  employees         Employee[] 
  attendances       Attendance[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt  
}

model Attendance {
  id            String          @id @default(cuid())
  
  date          DateTime 
  ipAddress     String? 
  macAddress    String? 
  notes         String? 
  lat           String?
  lng           String? 

  type          String? 
  typeRegister  String?
  location      Location?       @relation(fields: [idLocation], references: [id])
  idLocation    String?

  employee      Employee?       @relation(fields: [idEmployee], references: [id])
  idEmployee    String?
  image         String?

  status        Status          @default(active)            

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt  
}

model Justification {
  id                      String          @id @default(cuid())
  
  employee                Employee?       @relation(fields: [idEmployee], references: [id])
  idEmployee              String?

  dateIni                 DateTime 
  dateEnd                 DateTime     
  notes                   String? 
  
  typeJustification       TypeJustification?       @relation(fields: [idTypeJustification], references: [id])
  idTypeJustification     String?

  status        Status          @default(active)            

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt  
}

model TypeJustification {
  id            String          @id @default(cuid())
  value         String
  name          String
  status        Status          @default(active)

  justifications        Justification[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
} 

model Timezone {
  id            String          @id @default(cuid())
  name          String    
  status        Status          @default(active)

  organizations Organization[]  

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Timeformat {
  id            String          @id @default(cuid())
  name          String    
  status        Status          @default(active)

  organizations Organization[]  

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}